use std::str::FromStr;
use crate::Token ;
grammar;

pub Expr: i32 = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,

    Factor,
};

Factor: i32 = {
    <l:Factor> "*" <r:Number> => l * r,
    <l:Factor> "/" <r:Number> => l / r,
    <l:Factor> "%" <r:Number> => l %r ,
    Number,
};

pub Number: i32 = {
    <n:Num> => n,

    "(" <t:Number> ")" => t,
};

Num: i32 = <s:r"\d+"> => i32::from_str(s).unwrap() ;



//Double : f64 = <s:r"\d+.\d+"> => i64::from_str(s).unwrap();

//String1 : str  = <s:r#"".*""#> => s  ;


//Variable: str = <s:r"[A-Za-z][A-Za-z\d]*"> => s;